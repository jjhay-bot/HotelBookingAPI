{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
		"name": "Hotel Booking API - Role Authorization",
		"description": "A collection for testing role-based authorization in the Hotel Booking API with comprehensive examples for each endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "USER REGISTRATION AND LOGIN",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"test_user\",\n  \"password\": \"TestPass123!\"\n}"
						},
						"url": {
							"raw": "{{api}}/Auth/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"Auth",
								"register"
							]
						},
						"description": "Register a new user. The default role is 'User'. Use the examples below to test different scenarios."
					},
					"response": [
						{
							"name": "Success - Regular User Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"regular_user\",\n  \"password\": \"UserPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/register",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"User registered successfully\",\n  \"userId\": \"64a1b2c3d4e5f6789abcdef0\"\n}"
						},
						{
							"name": "Success - Another User Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"another_user\",\n  \"password\": \"AnotherPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/register",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"User registered successfully\",\n  \"userId\": \"64a1b2c3d4e5f6789abcdef1\"\n}"
						},
						{
							"name": "Error - Username Already Exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"regular_user\",\n  \"password\": \"UserPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/register",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"register"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 409,\n    \"message\": \"Username already exists\",\n    \"details\": []\n  }\n}"
						}
					]
				},
				{
					"name": "Register Admin/Manager User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"unauthorized_admin\",\n  \"password\": \"AdminPass123!\",\n  \"role\": 2\n}"
						},
						"url": {
							"raw": "{{api}}/Auth/register-admin",
							"host": [
								"{{api}}"
							],
							"path": [
								"Auth",
								"register-admin"
							]
						},
						"description": "Register a user with an elevated role (Manager or Admin). Requires Admin privileges."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to register admin user without admin token (should fail)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"unauthorized_admin\",\n  \"password\": \"AdminPass123!\",\n  \"role\": 2\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/register-admin",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"register-admin"
									]
								}
							}
						},
						{
							"name": "Register a manager user (as Admin)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"hotel_manager\",\n  \"password\": \"ManagerPass123!\",\n  \"role\": 1\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/register-admin",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"register-admin"
									]
								}
							}
						},
						{
							"name": "Register another admin user (as Admin)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin_user\",\n  \"password\": \"AdminPass123!\",\n  \"role\": 2\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/register-admin",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"register-admin"
									]
								}
							}
						}
					]
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",							"value": "application/json"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"username\": \"test_user\",\n  \"password\": \"TestPass123!\"\n}"
					},
					"url": {
						"raw": "{{api}}/Auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"Auth",
								"login"
							]
						},
						"description": "Authenticate a user and receive a JWT token. Use the examples below to test different user roles and scenarios."
					},
					"response": [
						{
							"name": "Success - Regular User Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"regular_user\",\n  \"password\": \"UserPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"64a1b2c3d4e5f6789abcdef0\",\n    \"username\": \"regular_user\",\n    \"role\": \"User\",\n    \"isActive\": true\n  }\n}"
						},
						{
							"name": "Success - Admin Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"AdminPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"64a1b2c3d4e5f6789abcdef2\",\n    \"username\": \"admin\",\n    \"role\": \"Admin\",\n    \"isActive\": true\n  }\n}"
						},
						{
							"name": "Success - Manager Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"hotel_manager\",\n  \"password\": \"ManagerPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"64a1b2c3d4e5f6789abcdef3\",\n    \"username\": \"hotel_manager\",\n    \"role\": \"Manager\",\n    \"isActive\": true\n  }\n}"
						},
						{
							"name": "Error - Invalid Credentials",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"regular_user\",\n  \"password\": \"WrongPassword!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 401,\n    \"message\": \"Invalid username or password\",\n    \"details\": []\n  }\n}"
						},
						{
							"name": "Error - Deactivated User",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"deactivated_user\",\n  \"password\": \"DeactivatedPass123!\"\n}"
								},
								"url": {
									"raw": "{{api}}/Auth/login",
									"host": [
										"{{api}}"
									],
									"path": [
										"Auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 401,\n    \"message\": \"Account is deactivated\",\n    \"details\": []\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "USER MANAGEMENT",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "Use userToken, managerToken, or adminToken"
							}
						],
						"url": {
							"raw": "{{api}}/users",
							"host": [
								"{{api}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Get a list of all users. Requires Manager or Admin role. Use the examples below to test different authorization scenarios."
					},
					"response": [
						{
							"name": "Success - Manager Access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"64a1b2c3d4e5f6789abcdef0\",\n    \"username\": \"regular_user\",\n    \"role\": \"User\",\n    \"isActive\": true,\n    \"createdAt\": \"2023-07-01T10:00:00Z\"\n  },\n  {\n    \"id\": \"64a1b2c3d4e5f6789abcdef2\",\n    \"username\": \"admin\",\n    \"role\": \"Admin\",\n    \"isActive\": true,\n    \"createdAt\": \"2023-07-01T09:00:00Z\"\n  }\n]"
						},
						{
							"name": "Success - Admin Access",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"64a1b2c3d4e5f6789abcdef0\",\n    \"username\": \"regular_user\",\n    \"role\": \"User\",\n    \"isActive\": true,\n    \"createdAt\": \"2023-07-01T10:00:00Z\"\n  },\n  {\n    \"id\": \"64a1b2c3d4e5f6789abcdef2\",\n    \"username\": \"admin\",\n    \"role\": \"Admin\",\n    \"isActive\": true,\n    \"createdAt\": \"2023-07-01T09:00:00Z\"\n  },\n  {\n    \"id\": \"64a1b2c3d4e5f6789abcdef3\",\n    \"username\": \"hotel_manager\",\n    \"role\": \"Manager\",\n    \"isActive\": true,\n    \"createdAt\": \"2023-07-01T08:00:00Z\"\n  }\n]"
						},
						{
							"name": "Error - Forbidden (Regular User)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 403,\n    \"message\": \"Access denied. Insufficient permissions.\",\n    \"details\": []\n  }\n}"
						},
						{
							"name": "Error - Unauthorized (No Token)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/users",
									"host": [
										"{{api}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 401,\n    \"message\": \"Unauthorized access. Please provide a valid token.\",\n    \"details\": []\n  }\n}"
						}
					]
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Get details for a specific user. Any authenticated user can perform this action."
					},
					"response": []
				},
				{
					"name": "Update User (PUT)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"updated_username\",\n  \"password\": \"UpdatedPass123!\",\n  \"role\": 0\n}"
						},
						"url": {
							"raw": "{{api}}/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Update a user's details. Requires Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to update user as regular user (should fail)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"updated_username\",\n  \"password\": \"UpdatedPass123!\",\n  \"role\": 0\n}"
								},
								"url": {
									"raw": "{{api}}/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							}
						},
						{
							"name": "Update user as Admin (should succeed)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"updated_user\",\n  \"password\": \"UpdatedPass123!\",\n  \"role\": 0\n}"
								},
								"url": {
									"raw": "{{api}}/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							}
						}
					]
				},
				{
					"name": "Update User (PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"partially_updated_user\"\n}"
						},
						"url": {
							"raw": "{{api}}/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Partially update a user's details. Requires Admin role."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete a user. Requires Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to delete user as Manager (should fail)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							}
						},
						{
							"name": "Delete user as Admin (should succeed)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/{{userId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "ROLE MANAGEMENT",
			"item": [
				{
					"name": "Update User Role",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": 1\n}"
						},
						"url": {
							"raw": "{{api}}/users/{{userId}}/role",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"role"
							]
						},
						"description": "Update a user's role. Requires Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to update user role as Manager (should fail)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"role\": 1\n}"
								},
								"url": {
									"raw": "{{api}}/users/{{userId}}/role",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"role"
									]
								}
							}
						},
						{
							"name": "Update user role as Admin (promote user to manager)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"role\": 1\n}"
								},
								"url": {
									"raw": "{{api}}/users/{{userId}}/role",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"role"
									]
								}
							}
						}
					]
				},
				{
					"name": "Deactivate User",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{api}}/users/{{userId}}/deactivate",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"deactivate"
							]
						},
						"description": "Deactivate a user account. Requires Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to deactivate user as Manager (should fail)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/{{userId}}/deactivate",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"deactivate"
									]
								}
							}
						},
						{
							"name": "Deactivate user as Admin (should succeed)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/{{userId}}/deactivate",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"deactivate"
									]
								}
							}
						}
					]
				},
				{
					"name": "Get Users by Role",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/users/role/0",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"role",
								"0"
							]
						},
						"description": "Get a list of users filtered by role. Requires Manager or Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Get users by role - Users (Manager can do this)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/role/0",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"role",
										"0"
									]
								}
							}
						},
						{
							"name": "Get users by role - Managers (Admin can do this)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/role/1",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"role",
										"1"
									]
								}
							}
						},
						{
							"name": "Get users by role - Admins (Admin can do this)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/role/2",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"role",
										"2"
									]
								}
							}
						},
						{
							"name": "Try to get users by role as regular user (should fail)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/users/role/0",
									"host": [
										"{{api}}"
									],
									"path": [
										"users",
										"role",
										"0"
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "ROOM MANAGEMENT",
			"item": [
				{
					"name": "Get All Rooms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/rooms",
							"host": [
								"{{api}}"
							],
							"path": [
								"rooms"
							]
						},
						"description": "Get a list of all rooms. Anonymous access is allowed."
					},
					"response": []
				},
				{
					"name": "Get Room by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/rooms/{{roomId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"rooms",
								"{{roomId}}"
							]
						},
						"description": "Get details for a specific room. Anonymous access is allowed."
					},
					"response": []
				},
				{
					"name": "Create Room",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "Use managerToken or adminToken"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Room\",\n  \"capacity\": 2,\n  \"pricePerNight\": 150.00,\n  \"isAvailable\": true\n}"
						},
						"url": {
							"raw": "{{api}}/rooms",
							"host": [
								"{{api}}"
							],
							"path": [
								"rooms"
							]
						},
						"description": "Create a new room. Requires Manager or Admin role. Use the examples below to test different scenarios."
					},
					"response": [
						{
							"name": "Success - Manager Creates Room",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Standard Room 101\",\n  \"capacity\": 2,\n  \"pricePerNight\": 100.00,\n  \"isAvailable\": true\n}"
								},
								"url": {
									"raw": "{{api}}/rooms",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"64a1b2c3d4e5f6789abcdef4\",\n  \"name\": \"Standard Room 101\",\n  \"capacity\": 2,\n  \"pricePerNight\": 100.00,\n  \"isAvailable\": true,\n  \"createdAt\": \"2023-07-01T12:00:00Z\",\n  \"updatedAt\": \"2023-07-01T12:00:00Z\"\n}"
						},
						{
							"name": "Success - Admin Creates Deluxe Room",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Deluxe Room 201\",\n  \"capacity\": 4,\n  \"pricePerNight\": 200.00,\n  \"isAvailable\": true\n}"
								},
								"url": {
									"raw": "{{api}}/rooms",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"64a1b2c3d4e5f6789abcdef5\",\n  \"name\": \"Deluxe Room 201\",\n  \"capacity\": 4,\n  \"pricePerNight\": 200.00,\n  \"isAvailable\": true,\n  \"createdAt\": \"2023-07-01T12:30:00Z\",\n  \"updatedAt\": \"2023-07-01T12:30:00Z\"\n}"
						},
						{
							"name": "Error - Forbidden (Regular User)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Standard Room 101\",\n  \"capacity\": 2,\n  \"pricePerNight\": 100.00,\n  \"isAvailable\": true\n}"
								},
								"url": {
									"raw": "{{api}}/rooms",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 403,\n    \"message\": \"Access denied. Insufficient permissions.\",\n    \"details\": []\n  }\n}"
						},
						{
							"name": "Error - Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"capacity\": -1,\n  \"pricePerNight\": -50.00,\n  \"isAvailable\": true\n}"
								},
								"url": {
									"raw": "{{api}}/rooms",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"One or more validation errors occurred.\",\n    \"details\": [\n      {\n        \"field\": \"name\",\n        \"message\": \"Room name is required\"\n      },\n      {\n        \"field\": \"capacity\",\n        \"message\": \"Capacity must be greater than 0\"\n      },\n      {\n        \"field\": \"pricePerNight\",\n        \"message\": \"Price must be greater than 0\"\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "Update Room (PUT)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Room 101\",\n  \"capacity\": 3,\n  \"pricePerNight\": 120.00,\n  \"isAvailable\": false\n}"
						},
						"url": {
							"raw": "{{api}}/rooms/{{roomId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"rooms",
								"{{roomId}}"
							]
						},
						"description": "Update a room's details. Requires Manager or Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to update room as regular user (should fail)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Room 101\",\n  \"capacity\": 3,\n  \"pricePerNight\": 120.00,\n  \"isAvailable\": false\n}"
								},
								"url": {
									"raw": "{{api}}/rooms/{{roomId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms",
										"{{roomId}}"
									]
								}
							}
						},
						{
							"name": "Update room as Manager (should succeed)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Standard Room 101\",\n  \"capacity\": 3,\n  \"pricePerNight\": 120.00,\n  \"isAvailable\": false\n}"
								},
								"url": {
									"raw": "{{api}}/rooms/{{roomId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms",
										"{{roomId}}"
									]
								}
							}
						}
					]
				},
				{
					"name": "Update Room (PATCH)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{managerToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pricePerNight\": 110.00,\n  \"isAvailable\": true\n}"
						},
						"url": {
							"raw": "{{api}}/rooms/{{roomId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"rooms",
								"{{roomId}}"
							]
						},
						"description": "Partially update a room's details. Requires Manager or Admin role."
					},
					"response": []
				},
				{
					"name": "Delete Room",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/rooms/{{roomId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"rooms",
								"{{roomId}}"
							]
						},
						"description": "Delete a room. Requires Admin role."
					},
					"response": [],
					"examples": [
						{
							"name": "Try to delete room as Manager (should fail)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{managerToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/rooms/{{roomId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms",
										"{{roomId}}"
									]
								}
							}
						},
						{
							"name": "Try to delete room as regular user (should fail)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/rooms/{{roomId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms",
										"{{roomId}}"
									]
								}
							}
						},
						{
							"name": "Delete room as Admin (should succeed)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"url": {
									"raw": "{{api}}/rooms/{{roomId}}",
									"host": [
										"{{api}}"
									],
									"path": [
										"rooms",
										"{{roomId}}"
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "AUTHENTICATION & AUTHORIZATION EDGE CASES",
			"item": [
				{
					"name": "Access protected endpoint without token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/users",
							"host": [
								"{{api}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Attempt to access a protected endpoint without providing an authentication token. Should result in a 401 Unauthorized error."
					},
					"response": []
				},
				{
					"name": "Access protected endpoint with invalid token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.token.here"
							}
						],
						"url": {
							"raw": "{{api}}/users",
							"host": [
								"{{api}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Attempt to access a protected endpoint with an invalid or expired token. Should result in a 401 Unauthorized error."
					},
					"response": []
				},
				{
					"name": "Access endpoint after user deactivation",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{deactivatedUserToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/users/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Attempt to access an endpoint using the token of a deactivated user. Should result in an authorization error."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"description": "Base URL for the API server"
		},
		{
			"key": "api",
			"value": "{{baseUrl}}/api",
			"description": "API base path"
		},
		{
			"key": "adminToken",
			"value": "",
			"description": "JWT token for admin user (set after admin login)"
		},
		{
			"key": "userToken",
			"value": "",
			"description": "JWT token for regular user (set after user login)"
		},
		{
			"key": "managerToken",
			"value": "",
			"description": "JWT token for manager user (set after manager login)"
		},
		{
			"key": "token",
			"value": "{{userToken}}",
			"description": "Current token to use (change to userToken, managerToken, or adminToken as needed)"
		},
		{
			"key": "userId",
			"value": "",
			"description": "ID of a user for testing (set after user creation/retrieval)"
		},
		{
			"key": "roomId",
			"value": "",
			"description": "ID of a room for testing (set after room creation/retrieval)"
		},
		{
			"key": "deactivatedUserToken",
			"value": "",
			"description": "JWT token for deactivated user (for testing access restrictions)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for role authorization collection",
					"// You can add common setup logic here"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common test script for role authorization collection",
					"",
					"// Auto-extract and save tokens from login responses",
					"if (pm.response.code === 200 && pm.response.json().token) {",
					"    const responseJson = pm.response.json();",
					"    const token = responseJson.token;",
					"    const user = responseJson.user;",
					"    ",
					"    // Save token based on user role",
					"    if (user && user.role) {",
					"        switch(user.role.toLowerCase()) {",
					"            case 'admin':",
					"                pm.collectionVariables.set('adminToken', token);",
					"                console.log('Admin token saved');",
					"                break;",
					"            case 'manager':",
					"                pm.collectionVariables.set('managerToken', token);",
					"                console.log('Manager token saved');",
					"                break;",
					"            case 'user':",
					"                pm.collectionVariables.set('userToken', token);",
					"                console.log('User token saved');",
					"                break;",
					"        }",
					"    }",
					"}",
					"",
					"// Auto-extract and save user ID from responses",
					"if (pm.response.json().userId) {",
					"    pm.collectionVariables.set('userId', pm.response.json().userId);",
					"    console.log('User ID saved: ' + pm.response.json().userId);",
					"}",
					"",
					"// Auto-extract and save room ID from responses",
					"if (pm.response.json().id && pm.request.url.path.includes('rooms')) {",
					"    pm.collectionVariables.set('roomId', pm.response.json().id);",
					"    console.log('Room ID saved: ' + pm.response.json().id);",
					"}"
				]
			}
		}
	]
}
