### Security Demo Tests
# Test file for demonstrating NoSQL injection vulnerabilities and protections

@baseUrl = http://localhost:5268
@api = {{baseUrl}}/api/security-demo

### 1. Normal login attempt (should fail - no users in DB yet)
POST {{api}}/vulnerable/login
Content-Type: application/json

{
  "username": "admin",
  "password": "password123"
}

### 2. NoSQL Injection Attack - Authentication Bypass
# This payload attempts to bypass authentication using MongoDB $ne operator
# It should succeed if the endpoint is truly vulnerable
POST {{api}}/vulnerable/login
Content-Type: application/json

{
  "username": {"$ne": ""},
  "password": {"$ne": ""}
}

### 3. NoSQL Injection Attack - Data Extraction
# This payload attempts to extract data using regex
POST {{api}}/vulnerable/login
Content-Type: application/json

{
  "username": {"$regex": ".*"},
  "password": {"$ne": ""}
}

### 4. NoSQL Injection Attack - JavaScript Injection (if $where is enabled)
POST {{api}}/vulnerable/login
Content-Type: application/json

{
  "$where": "this.username == 'admin' || '1' == '1'"
}

### 5. Test the SECURE login endpoint (should reject invalid input)
POST {{api}}/secure/login
Content-Type: application/json

{
  "username": "admin",
  "password": "password123"
}

### 6. Try injection attack on secure endpoint (should fail)
POST {{api}}/secure/login
Content-Type: application/json

{
  "username": {"$ne": ""},
  "password": {"$ne": ""}
}

### 7. Get attack examples and prevention methods
POST {{api}}/attack-examples
Content-Type: application/json

### 8. Test vulnerable user search
GET {{api}}/vulnerable/user?username=admin

### 9. Test vulnerable user search with injection attempt
GET {{api}}/vulnerable/user?username=admin"; db.users.drop(); var x="

### 10. Test secure user search
GET {{api}}/secure/user?username=admin

### 11. Test secure patterns with pagination
GET {{api}}/secure-patterns?searchTerm=admin&page=1
