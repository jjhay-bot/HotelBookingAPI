### Comprehensive Role-Based Authorization Tests
# Test file for demonstrating user roles and authorization
# Make sure to replace tokens and IDs with actual values from responses

@baseUrl = http://localhost:5268
@api = {{baseUrl}}/api


@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI2OGM2MWM3OGFjNTAyYTZkNTk0NjhiZmQiLCJ1bmlxdWVfbmFtZSI6ImFkbWluIiwicm9sZSI6WyJBZG1pbiIsIkFkbWluIl0sInVzZXJJZCI6IjY4YzYxYzc4YWM1MDJhNmQ1OTQ2OGJmZCIsImlzQWN0aXZlIjoiVHJ1ZSIsIm5iZiI6MTc1NzgxMzk0MiwiZXhwIjoxNzU3OTAwMzQyLCJpYXQiOjE3NTc4MTM5NDIsImlzcyI6IkhvdGVsQm9va2luZ0FQSSIsImF1ZCI6IkhvdGVsQm9va2luZ0FQSVVzZXJzIn0.AsQM-VIIcmVVP6nlJp5K6psddD4WRyk5tXDJiVb5KyY

@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI2OGM2MWI4MGFjNTAyYTZkNTk0NjhiZmIiLCJ1bmlxdWVfbmFtZSI6InJlZ3VsYXJfdXNlciIsInJvbGUiOlsiVXNlciIsIlVzZXIiXSwidXNlcklkIjoiNjhjNjFiODBhYzUwMmE2ZDU5NDY4YmZiIiwiaXNBY3RpdmUiOiJUcnVlIiwibmJmIjoxNzU3ODE0MTYwLCJleHAiOjE3NTc5MDA1NjAsImlhdCI6MTc1NzgxNDE2MCwiaXNzIjoiSG90ZWxCb29raW5nQVBJIiwiYXVkIjoiSG90ZWxCb29raW5nQVBJVXNlcnMifQ.qfaj1JIUge3gNaW6LS3DFU65T44_6NO7Gp4PFnYhxNw

@managerToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiI2OGM2MWQwMWFjNTAyYTZkNTk0NjhiZmUiLCJ1bmlxdWVfbmFtZSI6ImhvdGVsX21hbmFnZXIiLCJyb2xlIjpbIk1hbmFnZXIiLCJNYW5hZ2VyIl0sInVzZXJJZCI6IjY4YzYxZDAxYWM1MDJhNmQ1OTQ2OGJmZSIsImlzQWN0aXZlIjoiVHJ1ZSIsIm5iZiI6MTc1NzgxNDIzOSwiZXhwIjoxNzU3OTAwNjM5LCJpYXQiOjE3NTc4MTQyMzksImlzcyI6IkhvdGVsQm9va2luZ0FQSSIsImF1ZCI6IkhvdGVsQm9va2luZ0FQSVVzZXJzIn0.jf7_SUdSpg0FZ6fOPpP2a_nD_WhDGfflBAcEntWpbsA

// get by ID
@userId = 68c61be7ac502a6d59468bfc
@roomId = 68c6220e3c77940d6ad078d5
@deactivatedUserToken = 68c61be7ac502a6d59468bfc

### Variables to be replaced with actual values from test responses
# @userToken = [Token from regular user login]
# @managerToken = [Token from manager login]  
# @adminToken = [Token from admin login]
# @userId = [ID of a regular user]
# @managerId = [ID of a manager user]
# @roomId = [ID of a created room]

###############################################################################
### PART 1: USER REGISTRATION AND LOGIN
###############################################################################

### 1. Register a regular user (default role: User)
POST {{api}}/Auth/register
Content-Type: application/json

{
  "username": "regular_user",
  "password": "UserPass123!"
}

### 2. Register another regular user for testing
POST {{api}}/Auth/register
Content-Type: application/json

{
  "username": "another_user", 
  "password": "AnotherPass123!"
}

### 3. Try to register admin user without admin token (should fail with 401)
POST {{api}}/Auth/register-admin
Content-Type: application/json

{
  "username": "unauthorized_admin",
  "password": "AdminPass123!",
  "role": 2
}

### 4. Login as regular user
POST {{api}}/Auth/login
Content-Type: application/json

{
  "username": "regular_user",
  "password": "UserPass123!"
}

### 5. Login as another regular user
POST {{api}}/Auth/login
Content-Type: application/json

{
  "username": "another_user",
  "password": "AnotherPass123!"
}

###############################################################################
### PART 2: BOOTSTRAP ADMIN USER (Manual DB insertion or use existing)
###############################################################################

### 6. Login as existing admin (assumes you have one in DB)
POST {{api}}/Auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "AdminPass123!"
}

###############################################################################
### PART 3: ADMIN CREATES MANAGER AND ADDITIONAL USERS
###############################################################################

### 7. Register a manager user (only Admin can do this)
POST {{api}}/Auth/register-admin
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "username": "hotel_manager",
  "password": "ManagerPass123!",
  "role": 1
}

### 8. Register another admin user
POST {{api}}/Auth/register-admin
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "username": "admin_user",
  "password": "AdminPass123!",
  "role": 2
}

### 9. Login as manager
POST {{api}}/Auth/login
Content-Type: application/json

{
  "username": "hotel_manager",
  "password": "ManagerPass123!"
}

###############################################################################
### PART 4: USER MANAGEMENT ENDPOINT TESTS
###############################################################################

### 10. Try to get all users as regular user (should fail with 403)
GET {{api}}/users
Authorization: Bearer {{userToken}}

### 11. Get all users as Manager (should succeed)
GET {{api}}/users
Authorization: Bearer {{managerToken}}

### 12. Get all users as Admin (should succeed)
GET {{api}}/users
Authorization: Bearer {{adminToken}}

### 13. Get specific user by ID (any authenticated user can do this)
GET {{api}}/users/{{userId}}
Authorization: Bearer {{userToken}}

### 14. Try to update user as regular user (should fail with 403)
PUT {{api}}/users/{{userId}}
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "username": "updated_username",
  "password": "UpdatedPass123!",
  "role": 0
}

### 15. Update user as Admin (should succeed)
PUT {{api}}/users/{{userId}}
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "username": "updated_user",
  "password": "UpdatedPass123!",
  "role": 0
}

### 16. Partial update user as Admin
PATCH {{api}}/users/{{userId}}
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "username": "partially_updated_user"
}

### 17. Try to delete user as Manager (should fail with 403)
DELETE {{api}}/users/{{userId}}
Authorization: Bearer {{managerToken}}

### 18. Delete user as Admin (should succeed)
DELETE {{api}}/users/{{userId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 5: ROLE MANAGEMENT TESTS
###############################################################################

### 19. Try to update user role as Manager (should fail with 403)
PUT {{api}}/users/{{userId}}/role
Content-Type: application/json
Authorization: Bearer {{managerToken}}

{
  "role": 1
}

### 20. Update user role as Admin (promote user to manager)
PUT {{api}}/users/{{userId}}/role
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "role": 1
}

### 21. Try to deactivate user as Manager (should fail with 403)
PUT {{api}}/users/{{userId}}/deactivate
Authorization: Bearer {{managerToken}}

### 22. Deactivate user as Admin (should succeed)
PUT {{api}}/users/{{userId}}/deactivate
Authorization: Bearer {{adminToken}}

### 23. Get users by role - Users (Manager can do this)
GET {{api}}/users/role/0
Authorization: Bearer {{managerToken}}

### 24. Get users by role - Managers (Admin can do this)
GET {{api}}/users/role/1
Authorization: Bearer {{adminToken}}

### 25. Get users by role - Admins (Admin can do this)
GET {{api}}/users/role/2
Authorization: Bearer {{adminToken}}

### 26. Try to get users by role as regular user (should fail with 403)
GET {{api}}/users/role/0
Authorization: Bearer {{userToken}}

###############################################################################
### PART 6: ROOM MANAGEMENT TESTS
###############################################################################

### 27. Get rooms (anonymous access allowed)
GET {{api}}/rooms

### 28. Get specific room by ID (anonymous access allowed)
GET {{api}}/rooms/{{roomId}}

### 29. Try to create room as regular user (should fail with 403)
POST {{api}}/rooms
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "name": "Standard Room 101",
  "capacity": 2,
  "pricePerNight": 100.00,
  "isAvailable": true
}

### 30. Create room as Manager (should succeed)
POST {{api}}/rooms
Content-Type: application/json
Authorization: Bearer {{managerToken}}

{
  "name": "Standard Room 101",
  "capacity": 2,
  "pricePerNight": 100.00,
  "isAvailable": true
}

### 31. Create room as Admin (should succeed)
POST {{api}}/rooms
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "name": "Deluxe Room 201",
  "capacity": 4,
  "pricePerNight": 200.00,
  "isAvailable": true
}

### 32. Try to update room as regular user (should fail with 403)
PUT {{api}}/rooms/{{roomId}}
Content-Type: application/json
Authorization: Bearer {{userToken}}

{
  "name": "Updated Room 101",
  "capacity": 3,
  "pricePerNight": 120.00,
  "isAvailable": false
}

### 33. Update room as Manager (should succeed)
PUT {{api}}/rooms/{{roomId}}
Content-Type: application/json
Authorization: Bearer {{managerToken}}

{
  "name": "Updated Standard Room 101",
  "capacity": 3,
  "pricePerNight": 120.00,
  "isAvailable": false
}

### 34. Partial update room as Manager (should succeed)
PATCH {{api}}/rooms/{{roomId}}
Content-Type: application/json
Authorization: Bearer {{managerToken}}

{
  "pricePerNight": 110.00,
  "isAvailable": true
}

### 35. Try to delete room as Manager (should fail with 403 - only Admin can delete)
DELETE {{api}}/rooms/{{roomId}}
Authorization: Bearer {{managerToken}}

### 36. Try to delete room as regular user (should fail with 403)
DELETE {{api}}/rooms/{{roomId}}
Authorization: Bearer {{userToken}}

### 37. Delete room as Admin (should succeed)
DELETE {{api}}/rooms/{{roomId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 7: AUTHENTICATION AND AUTHORIZATION EDGE CASES
###############################################################################

### 38. Access protected endpoint without token (should fail with 401)
GET {{api}}/users

### 39. Access protected endpoint with invalid token (should fail with 401)
GET {{api}}/users
Authorization: Bearer invalid.token.here

### 40. Try to login with deactivated user (should fail with 401)
POST {{api}}/Auth/login
Content-Type: application/json

{
  "username": "deactivated_user",
  "password": "DeactivatedPass123!"
}

### 41. Try to access endpoint after user deactivation (should fail with appropriate error)
GET {{api}}/users/{{userId}}
Authorization: Bearer {{deactivatedUserToken}}

###############################################################################
### SUMMARY OF ROLE PERMISSIONS
###############################################################################

### Role Values and Permissions:
# 0 = User (Basic Role)
#   - Can register/login
#   - Can view rooms (anonymous)
#   - Can view their own user details
#   - Cannot manage users, rooms, or roles

# 1 = Manager (Room Management Role)  
#   - All User permissions
#   - Can view all users
#   - Can create/update rooms
#   - Can view users by role
#   - Cannot delete rooms, manage roles, or delete users

# 2 = Admin (Full Access Role)
#   - All Manager permissions  
#   - Can create Admin/Manager accounts
#   - Can update/delete users
#   - Can manage user roles
#   - Can deactivate users
#   - Can delete rooms
#   - Full system access

### Expected HTTP Status Codes:
# 200 - Success
# 201 - Created  
# 204 - No Content (successful update/delete)
# 401 - Unauthorized (no token or invalid token)
# 403 - Forbidden (insufficient role permissions)
# 404 - Not Found
# 409 - Conflict (username already exists)
